import {publicApi} from 'ts-api-guardian';

// =================================================================================================
// =================================================================================================
// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
// =================================================================================================
// =================================================================================================
//
// DO NOT EDIT THIS LIST OF PUBLIC APIS UNLESS YOU GET IT CLEARED BY: mhevery, vsavkin, or tbosch!
//
// =================================================================================================
// =================================================================================================
const CORE = [
  'AbstractProviderError',
  'AbstractProviderError.addKey(injector:ReflectiveInjector, key:ReflectiveKey):void',
  'AbstractProviderError.constructor(injector:ReflectiveInjector, key:ReflectiveKey, constructResolvingMessage:Function)',
  'AbstractProviderError.constructResolvingMessage:Function',
  'AbstractProviderError.context:any',
  'AbstractProviderError.injectors:ReflectiveInjector[]',
  'AbstractProviderError.keys:ReflectiveKey[]',
  'AbstractProviderError.message:string',
  'AfterContentChecked',
  'AfterContentChecked.ngAfterContentChecked():any',
  'AfterContentInit',
  'AfterContentInit.ngAfterContentInit():any',
  'AfterViewChecked',
  'AfterViewChecked.ngAfterViewChecked():any',
  'AfterViewInit',
  'AfterViewInit.ngAfterViewInit():any',
  'ApplicationRef',
  'ApplicationRef.bootstrap(componentFactory:ComponentFactory<C>):ComponentRef<C>',
  'ApplicationRef.componentTypes:Type[]',
  'ApplicationRef.dispose():void',
  'ApplicationRef.injector:Injector',
  'ApplicationRef.registerBootstrapListener(listener:(ref: ComponentRef<any>) => void):void',
  'ApplicationRef.registerDisposeListener(dispose:() => void):void',
  'ApplicationRef.run(callback:Function):any',
  'ApplicationRef.tick():void',
  'ApplicationRef.waitForAsyncInitializers():Promise<any>',
  'ApplicationRef.zone:NgZone',
  'asNativeElements(debugEls:DebugElement[]):any',
  'assertPlatform(requiredToken:any):PlatformRef',
  'AttributeMetadata',
  'AttributeMetadata.constructor(attributeName:string)',
  'AttributeMetadata.token:AttributeMetadata',
  'AttributeMetadata.toString():string',
  'AttributeMetadataFactory',
  'BaseException',
  'BaseException.constructor(message:string)',
  'BaseException.stack:any',
  'BaseException.toString():string',
  'bind(token:any):ProviderBuilder',
  'Binding',
  'Binding.constructor(token:any, {toClass,toValue,toAlias,toFactory,deps,multi}:{toClass?:Type, toValue?:any, toAlias?:any, toFactory:Function, deps?:Object[], multi?:boolean})',
  'Binding.toAlias:any',
  'Binding.toClass:any',
  'Binding.toFactory:any',
  'Binding.toValue:any',
  'AnimationAnimateMetadata',
  'AnimationAnimateMetadata.constructor(timings:string|number, styles:AnimationStyleMetadata|AnimationKeyframesSequenceMetadata)',
  'AnimationEntryMetadata',
  'AnimationEntryMetadata.constructor(name:string, definitions:AnimationStateMetadata[])',
  'AnimationGroupMetadata',
  'AnimationGroupMetadata.constructor(_steps:AnimationMetadata[])',
  'AnimationGroupMetadata.steps:AnimationMetadata[]',
  'AnimationKeyframesSequenceMetadata',
  'AnimationKeyframesSequenceMetadata.constructor(steps:AnimationStyleMetadata[])',
  'AnimationMetadata',
  'AnimationPlayer',
  'AnimationPlayer.destroy():void',
  'AnimationPlayer.finish():void',
  'AnimationPlayer.getPosition():number',
  'AnimationPlayer.onDone(fn:Function):void',
  'AnimationPlayer.parentPlayer:AnimationPlayer',
  'AnimationPlayer.parentPlayer=(player:AnimationPlayer)',
  'AnimationPlayer.pause():void',
  'AnimationPlayer.play():void',
  'AnimationPlayer.reset():void',
  'AnimationPlayer.restart():void',
  'AnimationPlayer.setPosition(p:any):void',
  'AnimationSequenceMetadata',
  'AnimationSequenceMetadata.constructor(_steps:AnimationMetadata[])',
  'AnimationSequenceMetadata.steps:AnimationMetadata[]',
  'AnimationStateDeclarationMetadata',
  'AnimationStateDeclarationMetadata.constructor(stateNameExpr:string, styles:AnimationStyleMetadata)',
  'AnimationStateMetadata',
  'AnimationStateTransitionMetadata',
  'AnimationStateTransitionMetadata.constructor(stateChangeExpr:string, animation:AnimationMetadata)',
  'AnimationStyleMetadata',
  'AnimationStyleMetadata.constructor(styles:Array<string|{[key:string]:string|number}>, offset:number)',
  'AnimationWithStepsMetadata',
  'AnimationWithStepsMetadata.constructor()',
  'AnimationWithStepsMetadata.steps:AnimationMetadata[]',
  'ChangeDetectionStrategy',
  'ChangeDetectionStrategy.CheckAlways',
  'ChangeDetectionStrategy.Checked',
  'ChangeDetectionStrategy.CheckOnce',
  'ChangeDetectionStrategy.Default',
  'ChangeDetectionStrategy.Detached',
  'ChangeDetectionStrategy.OnPush',
  'ChangeDetectorRef',
  'ChangeDetectorRef.checkNoChanges():void',
  'ChangeDetectorRef.detach():void',
  'ChangeDetectorRef.detectChanges():void',
  'ChangeDetectorRef.markForCheck():void',
  'ChangeDetectorRef.reattach():void',
  'Class(clsDef:ClassDefinition):ConcreteType',
  'ClassDefinition',
  'ClassDefinition.constructor:Function|any[]',
  'ClassDefinition.extends:Type',
  'CollectionChangeRecord',
  'CollectionChangeRecord.constructor(item:any, trackById:any)',
  'CollectionChangeRecord.currentIndex:number',
  'CollectionChangeRecord.previousIndex:number',
  'CollectionChangeRecord.toString():string',
  'ComponentDecorator',
  'ComponentDecorator.View(obj:{templateUrl?:string, template?:string, directives?:Array<Type|any[]>, pipes?:Array<Type|any[]>, renderer?:string, styles?:string[], styleUrls?:string[], animations?:AnimationEntryMetadata[]}):ViewDecorator',
  'ComponentFactory.componentType:Type',
  'ComponentFactory.constructor(selector:string, _viewFactory:Function, _componentType:Type)',
  'ComponentFactory.create(injector:Injector, projectableNodes:any[][], rootSelectorOrNode:string|any):ComponentRef<C>',
  'ComponentFactory<C>',
  'ComponentMetadata',
  'ComponentMetadata.animations:AnimationEntryMetadata[]',
  'ComponentMetadata.changeDetection:ChangeDetectionStrategy',
  'ComponentMetadata.constructor({selector,inputs,outputs,properties,events,host,exportAs,moduleId,providers,viewProviders,changeDetection=ChangeDetectionStrategy.Default,queries,templateUrl,template,styleUrls,styles,animations,directives,pipes,encapsulation}:{selector?:string, inputs?:string[], outputs?:string[], properties?:string[], events?:string[], host?:{[key:string]:string}, providers?:any[], exportAs?:string, moduleId?:string, viewProviders?:any[], queries?:{[key:string]:any}, changeDetection?:ChangeDetectionStrategy, templateUrl?:string, template?:string, styleUrls?:string[], styles?:string[], animations?:AnimationEntryMetadata[], directives?:Array<Type|any[]>, pipes?:Array<Type|any[]>, encapsulation?:ViewEncapsulation})',
  'ComponentMetadata.directives:Array<Type|any[]>',
  'ComponentMetadata.encapsulation:ViewEncapsulation',
  'ComponentMetadata.moduleId:string',
  'ComponentMetadata.pipes:Array<Type|any[]>',
  'ComponentMetadata.styles:string[]',
  'ComponentMetadata.styleUrls:string[]',
  'ComponentMetadata.template:string',
  'ComponentMetadata.templateUrl:string',
  'ComponentMetadata.viewProviders:any[]',
  'ComponentMetadataFactory',
  'ComponentRef.changeDetectorRef:ChangeDetectorRef',
  'ComponentRef.componentType:Type',
  'ComponentRef.destroy():void',
  'ComponentRef.hostView:ViewRef',
  'ComponentRef.injector:Injector',
  'ComponentRef.instance:C',
  'ComponentRef.location:ElementRef',
  'ComponentRef.onDestroy(callback:Function):void',
  'ComponentRef<C>',
  'ComponentResolver',
  'ComponentResolver.clearCache():any',
  'ComponentResolver.resolveComponent(component:Type|string):Promise<ComponentFactory<any>>',
  'const APP_ID:any',
  'const APP_INITIALIZER:any',
  'const APPLICATION_COMMON_PROVIDERS:Array<Type|{[k:string]:any}|any[]>',
  'const PACKAGE_ROOT_URL:any',
  'const PLATFORM_COMMON_PROVIDERS:Array<any|Type|Provider|any[]>',
  'const PLATFORM_DIRECTIVES:OpaqueToken',
  'const PLATFORM_INITIALIZER:any',
  'const PLATFORM_PIPES:OpaqueToken',
  'ContentChildMetadata',
  'ContentChildMetadata.constructor(_selector:Type|string, {read=null}:{read?:any})',
  'ContentChildMetadataFactory',
  'ContentChildrenMetadata',
  'ContentChildrenMetadata.constructor(_selector:Type|string, {descendants=false,read=null}:{descendants?:boolean, read?:any})',
  'ContentChildrenMetadataFactory',
  'coreBootstrap(componentFactory:ComponentFactory<C>, injector:Injector):ComponentRef<C>',
  'coreLoadAndBootstrap(componentType:Type, injector:Injector):Promise<ComponentRef<any>>',
  'createNgZone():NgZone',
  'createPlatform(injector:Injector):PlatformRef',
  'CyclicDependencyError',
  'CyclicDependencyError.constructor(injector:ReflectiveInjector, key:ReflectiveKey)',
  'DebugElement',
  'DebugElement.addChild(child:DebugNode):any',
  'DebugElement.attributes:{[key:string]:string}',
  'DebugElement.childNodes:DebugNode[]',
  'DebugElement.children:DebugElement[]',
  'DebugElement.constructor(nativeNode:any, parent:any, _debugInfo:RenderDebugInfo)',
  'DebugElement.insertChildrenAfter(child:DebugNode, newChildren:DebugNode[]):any',
  'DebugElement.name:string',
  'DebugElement.nativeElement:any',
  'DebugElement.properties:{[key:string]:string}',
  'DebugElement.query(predicate:Predicate<DebugElement>):DebugElement',
  'DebugElement.queryAll(predicate:Predicate<DebugElement>):DebugElement[]',
  'DebugElement.queryAllNodes(predicate:Predicate<DebugNode>):DebugNode[]',
  'DebugElement.removeChild(child:DebugNode):any',
  'DebugElement.triggerEventHandler(eventName:string, eventObj:any):any',
  'DebugNode',
  'DebugNode.componentInstance:any',
  'DebugNode.constructor(nativeNode:any, parent:DebugNode, _debugInfo:RenderDebugInfo)',
  'DebugNode.context:any',
  'DebugNode.inject(token:any):any',
  'DebugNode.injector:Injector',
  'DebugNode.listeners:EventListener[]',
  'DebugNode.nativeNode:any',
  'DebugNode.parent:DebugElement',
  'DebugNode.providerTokens:any[]',
  'DebugNode.references:{[key:string]:any}',
  'DebugNode.source:string',
  'DefaultIterableDiffer',
  'DefaultIterableDiffer.check(collection:any):boolean',
  'DefaultIterableDiffer.collection:any',
  'DefaultIterableDiffer.constructor(_trackByFn:TrackByFn)',
  'DefaultIterableDiffer.diff(collection:any):DefaultIterableDiffer',
  'DefaultIterableDiffer.forEachAddedItem(fn:Function):any',
  'DefaultIterableDiffer.forEachIdentityChange(fn:Function):any',
  'DefaultIterableDiffer.forEachItem(fn:Function):any',
  'DefaultIterableDiffer.forEachMovedItem(fn:Function):any',
  'DefaultIterableDiffer.forEachPreviousItem(fn:Function):any',
  'DefaultIterableDiffer.forEachRemovedItem(fn:Function):any',
  'DefaultIterableDiffer.isDirty:boolean',
  'DefaultIterableDiffer.length:number',
  'DefaultIterableDiffer.onDestroy():any',
  'DefaultIterableDiffer.toString():string',
  'DirectiveDecorator',
  'DirectiveMetadata',
  'DirectiveMetadata.constructor({selector,inputs,outputs,properties,events,host,providers,exportAs,queries}:{selector?:string, inputs?:string[], outputs?:string[], properties?:string[], events?:string[], host?:{[key:string]:string}, providers?:any[], exportAs?:string, queries?:{[key:string]:any}})',
  'DirectiveMetadata.events:string[]',
  'DirectiveMetadata.exportAs:string',
  'DirectiveMetadata.host:{[key:string]:string}',
  'DirectiveMetadata.inputs:string[]',
  'DirectiveMetadata.outputs:string[]',
  'DirectiveMetadata.properties:string[]',
  'DirectiveMetadata.providers:any[]',
  'DirectiveMetadata.queries:{[key:string]:any}',
  'DirectiveMetadata.selector:string',
  'DirectiveMetadataFactory',
  'disposePlatform():void',
  'DoCheck',
  'DoCheck.ngDoCheck():any',
  'DynamicComponentLoader',
  'DynamicComponentLoader.loadAsRoot(type:Type, overrideSelectorOrNode:string|any, injector:Injector, onDispose:() => void, projectableNodes:any[][]):Promise<ComponentRef<any>>',
  'DynamicComponentLoader.loadNextToLocation(type:Type, location:ViewContainerRef, providers:ResolvedReflectiveProvider[], projectableNodes:any[][]):Promise<ComponentRef<any>>',
  'ElementRef',
  'ElementRef.constructor(nativeElement:any)',
  'ElementRef.nativeElement:any',
  'EmbeddedViewRef.context:C',
  'EmbeddedViewRef.destroy():any',
  'EmbeddedViewRef.rootNodes:any[]',
  'EmbeddedViewRef<C>',
  'enableProdMode():any',
  'EventEmitter.constructor(isAsync:boolean)',
  'EventEmitter.emit(value:T):any',
  'EventEmitter.next(value:any):any',
  'EventEmitter.subscribe(generatorOrNext:any, error:any, complete:any):any',
  'EventEmitter<T>',
  'ExceptionHandler',
  'ExceptionHandler.call(exception:any, stackTrace:any, reason:string):void',
  'ExceptionHandler.constructor(_logger:any, _rethrowException:boolean)',
  'ExceptionHandler.exceptionToString(exception:any, stackTrace:any, reason:string):string',
  'ExpressionChangedAfterItHasBeenCheckedException',
  'ExpressionChangedAfterItHasBeenCheckedException.constructor(oldValue:any, currValue:any, context:any)',
  'forwardRef(forwardRefFn:ForwardRefFn):Type',
  'ForwardRefFn',
  'getDebugNode(nativeNode:any):DebugNode',
  'getPlatform():PlatformRef',
  'GetTestability',
  'GetTestability.addToWindow(registry:TestabilityRegistry):void',
  'GetTestability.findTestabilityInTree(registry:TestabilityRegistry, elem:any, findInAncestors:boolean):Testability',
  'HostBindingMetadata',
  'HostBindingMetadata.constructor(hostPropertyName:string)',
  'HostBindingMetadataFactory',
  'HostListenerMetadata',
  'HostListenerMetadata.constructor(eventName:string, args:string[])',
  'HostListenerMetadataFactory',
  'HostMetadata',
  'HostMetadata.toString():string',
  'HostMetadataFactory',
  'InjectableMetadata',
  'InjectableMetadata.constructor()',
  'InjectableMetadataFactory',
  'InjectMetadata',
  'InjectMetadata.constructor(token:any)',
  'InjectMetadata.toString():string',
  'InjectMetadataFactory',
  'Injector',
  'Injector.get(token:any, notFoundValue:any):any',
  'Injector.THROW_IF_NOT_FOUND:any',
  'InputMetadata',
  'InputMetadata.constructor(bindingPropertyName:string)',
  'InputMetadataFactory',
  'InstantiationError',
  'InstantiationError.addKey(injector:ReflectiveInjector, key:ReflectiveKey):void',
  'InstantiationError.causeKey:ReflectiveKey',
  'InstantiationError.constructor(injector:ReflectiveInjector, originalException:any, originalStack:any, key:ReflectiveKey)',
  'InstantiationError.context:any',
  'InstantiationError.injectors:ReflectiveInjector[]',
  'InstantiationError.keys:ReflectiveKey[]',
  'InstantiationError.wrapperMessage:string',
  'InvalidProviderError',
  'InvalidProviderError.constructor(provider:any)',
  'IterableDiffer',
  'IterableDiffer.diff(object:any):any',
  'IterableDiffer.onDestroy():any',
  'IterableDifferFactory',
  'IterableDifferFactory.create(cdRef:ChangeDetectorRef, trackByFn:TrackByFn):IterableDiffer',
  'IterableDifferFactory.supports(objects:any):boolean',
  'IterableDiffers',
  'IterableDiffers.constructor(factories:IterableDifferFactory[])',
  'IterableDiffers.create(factories:IterableDifferFactory[], parent:IterableDiffers):IterableDiffers',
  'IterableDiffers.extend(factories:IterableDifferFactory[]):Provider',
  'IterableDiffers.find(iterable:any):IterableDifferFactory',
  'KeyValueChangeRecord',
  'KeyValueChangeRecord.constructor(key:any)',
  'KeyValueChangeRecord.currentValue:any',
  'KeyValueChangeRecord.previousValue:any',
  'KeyValueChangeRecord.toString():string',
  'KeyValueDiffer',
  'KeyValueDiffer.diff(object:any):any',
  'KeyValueDiffer.onDestroy():any',
  'KeyValueDifferFactory',
  'KeyValueDifferFactory.create(cdRef:ChangeDetectorRef):KeyValueDiffer',
  'KeyValueDifferFactory.supports(objects:any):boolean',
  'KeyValueDiffers',
  'KeyValueDiffers.constructor(factories:KeyValueDifferFactory[])',
  'KeyValueDiffers.create(factories:KeyValueDifferFactory[], parent:KeyValueDiffers):KeyValueDiffers',
  'KeyValueDiffers.extend(factories:KeyValueDifferFactory[]):Provider',
  'KeyValueDiffers.find(kv:Object):KeyValueDifferFactory',
  'NgZone',
  'NgZone.assertInAngularZone():void',
  'NgZone.assertNotInAngularZone():void',
  'NgZone.constructor({enableLongStackTrace=false}:any)',
  'NgZone.hasPendingMacrotasks:boolean',
  'NgZone.hasPendingMicrotasks:boolean',
  'NgZone.isInAngularZone():boolean',
  'NgZone.isStable:boolean',
  'NgZone.onError:EventEmitter<any>',
  'NgZone.onMicrotaskEmpty:EventEmitter<any>',
  'NgZone.onStable:EventEmitter<any>',
  'NgZone.onUnstable:EventEmitter<any>',
  'NgZone.run(fn:() => any):any',
  'NgZone.runGuarded(fn:() => any):any',
  'NgZone.runOutsideAngular(fn:() => any):any',
  'NgZoneError',
  'NgZoneError.constructor(error:any, stackTrace:any)',
  'NoAnnotationError',
  'NoAnnotationError.constructor(typeOrFunc:any, params:any[][])',
  'NoProviderError',
  'NoProviderError.constructor(injector:ReflectiveInjector, key:ReflectiveKey)',
  'OnChanges',
  'OnChanges.ngOnChanges(changes:SimpleChanges):any',
  'OnDestroy',
  'OnDestroy.ngOnDestroy():any',
  'OnInit',
  'OnInit.ngOnInit():any',
  'OpaqueToken',
  'OpaqueToken.constructor(_desc:string)',
  'OpaqueToken.toString():string',
  'OptionalMetadata',
  'OptionalMetadata.toString():string',
  'OptionalMetadataFactory',
  'OutOfBoundsError',
  'OutOfBoundsError.constructor(index:any)',
  'OutputMetadata',
  'OutputMetadata.constructor(bindingPropertyName:string)',
  'OutputMetadataFactory',
  'PipeMetadata',
  'PipeMetadata.constructor({name,pure}:{name:string, pure?:boolean})',
  'PipeMetadata.name:string',
  'PipeMetadata.pure:boolean',
  'PipeMetadataFactory',
  'PipeTransform',
  'PipeTransform.transform(value:any, args:any[]):any',
  'PlatformRef',
  'PlatformRef.dispose():void',
  'PlatformRef.disposed:boolean',
  'PlatformRef.injector:Injector',
  'PlatformRef.registerDisposeListener(dispose:() => void):void',
  'provide(token:any, {useClass,useValue,useExisting,useFactory,deps,multi}:{useClass?:Type, useValue?:any, useExisting?:any, useFactory?:Function, deps?:Object[], multi?:boolean}):Provider',
  'Provider',
  'Provider.constructor(token:any, {useClass,useValue,useExisting,useFactory,deps,multi}:{useClass?:Type, useValue?:any, useExisting?:any, useFactory?:Function, deps?:Object[], multi?:boolean})',
  'Provider.dependencies:Object[]',
  'Provider.multi:boolean',
  'Provider.token:any',
  'Provider.useClass:Type',
  'Provider.useExisting:any',
  'Provider.useFactory:Function',
  'Provider.useValue:any',
  'ProviderBuilder',
  'ProviderBuilder.constructor(token:any)',
  'ProviderBuilder.toAlias(aliasToken:any):Provider',
  'ProviderBuilder.toClass(type:Type):Provider',
  'ProviderBuilder.toFactory(factory:Function, dependencies:any[]):Provider',
  'ProviderBuilder.toValue(value:any):Provider',
  'QueryList.changes:Observable<any>',
  'QueryList.dirty:any',
  'QueryList.filter(fn:(item: T) => boolean):T[]',
  'QueryList.first:T',
  'QueryList.forEach(fn:(item: T) => void):void',
  'QueryList.last:T',
  'QueryList.length:number',
  'QueryList.map(fn:(item: T) => U):U[]',
  'QueryList.notifyOnChanges():void',
  'QueryList.reduce(fn:(acc: U, item: T) => U, init:U):U',
  'QueryList.reset(res:Array<T|any[]>):void',
  'QueryList.setDirty():any',
  'QueryList.toArray():T[]',
  'QueryList.toString():string',
  'QueryList<T>',
  'QueryMetadata',
  'QueryMetadata.constructor(_selector:Type|string, {descendants=false,first=false,read=null}:{descendants?:boolean, first?:boolean, read?:any})',
  'QueryMetadata.descendants:boolean',
  'QueryMetadata.first:boolean',
  'QueryMetadata.isVarBindingQuery:boolean',
  'QueryMetadata.isViewQuery:boolean',
  'QueryMetadata.read:any',
  'QueryMetadata.selector:any',
  'QueryMetadata.toString():string',
  'QueryMetadata.varBindings:string[]',
  'QueryMetadataFactory',
  'ReflectiveInjector',
  'ReflectiveInjector.createChildFromResolved(providers:ResolvedReflectiveProvider[]):ReflectiveInjector',
  'ReflectiveInjector.debugContext():any',
  'ReflectiveInjector.fromResolvedBindings(providers:ResolvedReflectiveProvider[]):ReflectiveInjector',
  'ReflectiveInjector.fromResolvedProviders(providers:ResolvedReflectiveProvider[], parent:Injector):ReflectiveInjector',
  'ReflectiveInjector.get(token:any, notFoundValue:any):any',
  'ReflectiveInjector.instantiateResolved(provider:ResolvedReflectiveProvider):any',
  'ReflectiveInjector.parent:Injector',
  'ReflectiveInjector.resolve(providers:Array<Type|Provider|{[k:string]:any}|any[]>):ResolvedReflectiveProvider[]',
  'ReflectiveInjector.resolveAndCreate(providers:Array<Type|Provider|{[k:string]:any}|any[]>, parent:Injector):ReflectiveInjector',
  'ReflectiveInjector.resolveAndCreateChild(providers:Array<Type|Provider|{[k:string]:any}|any[]>):ReflectiveInjector',
  'ReflectiveInjector.resolveAndInstantiate(provider:Type|Provider):any',
  'ReflectiveKey',
  'ReflectiveKey.constructor(token:Object, id:number)',
  'ReflectiveKey.displayName:string',
  'ReflectiveKey.get(token:Object):ReflectiveKey',
  'ReflectiveKey.numberOfKeys:number',
  'RenderComponentType',
  'RenderComponentType.constructor(id:string, templateUrl:string, slotCount:number, encapsulation:ViewEncapsulation, styles:Array<string|any[]>)',
  'Renderer',
  'Renderer.animate(element:any, startingStyles:AnimationStyles, keyframes:AnimationKeyframe[], duration:number, delay:number, easing:string):AnimationPlayer',
  'Renderer.attachViewAfter(node:any, viewRootNodes:any[]):void',
  'Renderer.createElement(parentElement:any, name:string, debugInfo:RenderDebugInfo):any',
  'Renderer.createTemplateAnchor(parentElement:any, debugInfo:RenderDebugInfo):any',
  'Renderer.createText(parentElement:any, value:string, debugInfo:RenderDebugInfo):any',
  'Renderer.createViewRoot(hostElement:any):any',
  'Renderer.destroyView(hostElement:any, viewAllNodes:any[]):void',
  'Renderer.detachView(viewRootNodes:any[]):void',
  'Renderer.invokeElementMethod(renderElement:any, methodName:string, args:any[]):any',
  'Renderer.listen(renderElement:any, name:string, callback:Function):Function',
  'Renderer.listenGlobal(target:string, name:string, callback:Function):Function',
  'Renderer.projectNodes(parentElement:any, nodes:any[]):void',
  'Renderer.selectRootElement(selectorOrNode:string|any, debugInfo:RenderDebugInfo):any',
  'Renderer.setBindingDebugInfo(renderElement:any, propertyName:string, propertyValue:string):void',
  'Renderer.setElementAttribute(renderElement:any, attributeName:string, attributeValue:string):void',
  'Renderer.setElementClass(renderElement:any, className:string, isAdd:boolean):any',
  'Renderer.setElementProperty(renderElement:any, propertyName:string, propertyValue:any):void',
  'Renderer.setElementStyle(renderElement:any, styleName:string, styleValue:string):any',
  'Renderer.setElementStyles(renderElement:any, styles:{[key:string]:string}):any',
  'Renderer.setText(renderNode:any, text:string):any',
  'ResolvedReflectiveBinding',
  'ResolvedReflectiveFactory',
  'ResolvedReflectiveFactory.constructor(factory:Function, dependencies:ReflectiveDependency[])',
  'ResolvedReflectiveProvider',
  'ResolvedReflectiveProvider.key:ReflectiveKey',
  'ResolvedReflectiveProvider.multiProvider:boolean',
  'ResolvedReflectiveProvider.resolvedFactories:ResolvedReflectiveFactory[]',
  'resolveForwardRef(type:any):any',
  'RootRenderer',
  'RootRenderer.renderComponent(componentType:RenderComponentType):Renderer',
  'SelfMetadata',
  'SelfMetadata.toString():string',
  'SelfMetadataFactory',
  'setTestabilityGetter(getter:GetTestability):void',
  'SimpleChange',
  'SimpleChange.constructor(previousValue:any, currentValue:any)',
  'SimpleChange.isFirstChange():boolean',
  'SimpleChanges',
  'SkipSelfMetadata',
  'SkipSelfMetadata.toString():string',
  'SkipSelfMetadataFactory',
  'SystemJsComponentResolver',
  'SystemJsComponentResolver.clearCache():any',
  'SystemJsComponentResolver.constructor(_resolver:ComponentResolver)',
  'SystemJsComponentResolver.resolveComponent(componentType:string|Type):Promise<ComponentFactory<any>>',
  'TemplateRef.createEmbeddedView(context:C):EmbeddedViewRef<C>',
  'TemplateRef.elementRef:ElementRef',
  'TemplateRef<C>',
  'Testability',
  'Testability.constructor(_ngZone:NgZone)',
  'Testability.decreasePendingRequestCount():number',
  'Testability.findBindings(using:any, provider:string, exactMatch:boolean):any[]',
  'Testability.findProviders(using:any, provider:string, exactMatch:boolean):any[]',
  'Testability.getPendingRequestCount():number',
  'Testability.increasePendingRequestCount():number',
  'Testability.isStable():boolean',
  'Testability.whenStable(callback:Function):void',
  'TestabilityRegistry',
  'TestabilityRegistry.constructor()',
  'TestabilityRegistry.findTestabilityInTree(elem:Node, findInAncestors:boolean):Testability',
  'TestabilityRegistry.getAllRootElements():any[]',
  'TestabilityRegistry.getAllTestabilities():Testability[]',
  'TestabilityRegistry.getTestability(elem:any):Testability',
  'TestabilityRegistry.registerApplication(token:any, testability:Testability):any',
  'TrackByFn',
  'TypeDecorator',
  'TypeDecorator.annotations:any[]',
  'TypeDecorator.Class(obj:ClassDefinition):ConcreteType',
  'var __core_private__:any',
  'var Attribute:AttributeMetadataFactory',
  'var Component:ComponentMetadataFactory',
  'var ContentChild:ContentChildMetadataFactory',
  'var ContentChildren:ContentChildrenMetadataFactory',
  'var Directive:DirectiveMetadataFactory',
  'var Host:HostMetadataFactory',
  'var HostBinding:HostBindingMetadataFactory',
  'var HostListener:HostListenerMetadataFactory',
  'var Inject:InjectMetadataFactory',
  'var Injectable:InjectableMetadataFactory',
  'var Input:InputMetadataFactory',
  'var Optional:OptionalMetadataFactory',
  'var Output:OutputMetadataFactory',
  'var Pipe:PipeMetadataFactory',
  'var Query:QueryMetadataFactory',
  'var Self:SelfMetadataFactory',
  'var SkipSelf:SkipSelfMetadataFactory',
  'var Type:any',
  'var ViewChild:ViewChildMetadataFactory',
  'var ViewChildren:ViewChildrenMetadataFactory',
  'var ViewQuery:QueryMetadataFactory',
  'var wtfCreateScope:(signature: string, flags?: any) => impl.WtfScopeFn',
  'var wtfEndTimeRange:(range: any) => void',
  'var wtfLeave:<T>(scope: any, returnValue?: T) => T',
  'var wtfStartTimeRange:(rangeType: string, action: string) => any',
  'ViewChildMetadata',
  'ViewChildMetadata.constructor(_selector:Type|string, {read=null}:{read?:any})',
  'ViewChildMetadataFactory',
  'ViewChildrenMetadata',
  'ViewChildrenMetadata.constructor(_selector:Type|string, {read=null}:{read?:any})',
  'ViewChildrenMetadataFactory',
  'ViewContainerRef',
  'ViewContainerRef.clear():void',
  'ViewContainerRef.createComponent(componentFactory:ComponentFactory<C>, index:number, injector:Injector, projectableNodes:any[][]):ComponentRef<C>',
  'ViewContainerRef.createEmbeddedView(templateRef:TemplateRef<C>, context:C, index:number):EmbeddedViewRef<C>',
  'ViewContainerRef.detach(index:number):ViewRef',
  'ViewContainerRef.element:ElementRef',
  'ViewContainerRef.get(index:number):ViewRef',
  'ViewContainerRef.indexOf(viewRef:ViewRef):number',
  'ViewContainerRef.injector:Injector',
  'ViewContainerRef.insert(viewRef:ViewRef, index:number):ViewRef',
  'ViewContainerRef.length:number',
  'ViewContainerRef.parentInjector:Injector',
  'ViewContainerRef.remove(index:number):void',
  'ViewDecorator',
  'ViewDecorator.View(obj:{templateUrl?:string, template?:string, directives?:Array<Type|any[]>, pipes?:Array<Type|any[]>, renderer?:string, styles?:string[], styleUrls?:string[], animations?:AnimationEntryMetadata[]}):ViewDecorator',
  'ViewEncapsulation',
  'ViewEncapsulation.Emulated',
  'ViewEncapsulation.Native',
  'ViewEncapsulation.None',
  'ViewMetadata',
  'ViewMetadata.animations:AnimationEntryMetadata[]',
  'ViewMetadata.constructor({templateUrl,template,directives,pipes,encapsulation,styles,styleUrls,animations}:{templateUrl?:string, template?:string, directives?:Array<Type|any[]>, pipes?:Array<Type|any[]>, encapsulation?:ViewEncapsulation, styles?:string[], styleUrls?:string[], animations?:AnimationEntryMetadata[]})',
  'ViewMetadata.directives:Array<Type|any[]>',
  'ViewMetadata.encapsulation:ViewEncapsulation',
  'ViewMetadata.pipes:Array<Type|any[]>',
  'ViewMetadata.styles:string[]',
  'ViewMetadata.styleUrls:string[]',
  'ViewMetadata.template:string',
  'ViewMetadata.templateUrl:string',
  'ViewMetadataFactory',
  'ViewQueryMetadata',
  'ViewQueryMetadata.constructor(_selector:Type|string, {descendants=false,first=false,read=null}:{descendants?:boolean, first?:boolean, read?:any})',
  'ViewQueryMetadata.isViewQuery:any',
  'ViewQueryMetadata.toString():string',
  'ViewRef',
  'ViewRef.destroyed:boolean',
  'ViewRef.onDestroy(callback:Function):any',
  'WrappedException',
  'WrappedException.constructor(_wrapperMessage:string, _originalException:any, _originalStack:any, _context:any)',
  'WrappedException.context:any',
  'WrappedException.message:string',
  'WrappedException.originalException:any',
  'WrappedException.originalStack:any',
  'WrappedException.toString():string',
  'WrappedException.wrapperMessage:string',
  'WrappedException.wrapperStack:any',
  'WrappedValue',
  'WrappedValue.constructor(wrapped:any)',
  'WrappedValue.wrap(value:any):WrappedValue',
  'WtfScopeFn',
  'animate(timing:string|number, styles:AnimationStyleMetadata|AnimationKeyframesSequenceMetadata):AnimationAnimateMetadata',
  'const AUTO_STYLE:any',
  'group(steps:AnimationMetadata[]):AnimationGroupMetadata',
  'keyframes(steps:AnimationStyleMetadata|AnimationStyleMetadata[]):AnimationKeyframesSequenceMetadata',
  'sequence(steps:AnimationMetadata[]):AnimationSequenceMetadata',
  'state(stateNameExpr:string, styles:AnimationStyleMetadata):AnimationStateDeclarationMetadata',
  'style(tokens:string|{[key:string]:string|number}|Array<string|{[key:string]:string|number}>):AnimationStyleMetadata',
  'transition(stateChangeExpr:string, animationData:AnimationMetadata|AnimationMetadata[]):AnimationStateTransitionMetadata',
  'trigger(name:string, animation:AnimationMetadata|AnimationMetadata[]):AnimationEntryMetadata'
];

const COMMON = [
  'AbstractControl',
  'AbstractControl.constructor(validator:ValidatorFn, asyncValidator:AsyncValidatorFn)',
  'AbstractControl.dirty:boolean',
  'AbstractControl.errors:{[key:string]:any}',
  'AbstractControl.find(path:Array<string|number>|string):AbstractControl',
  'AbstractControl.getError(errorCode:string, path:string[]):any',
  'AbstractControl.hasError(errorCode:string, path:string[]):boolean',
  'AbstractControl.markAsDirty({onlySelf}:{onlySelf?:boolean}):void',
  'AbstractControl.markAsPending({onlySelf}:{onlySelf?:boolean}):void',
  'AbstractControl.markAsTouched():void',
  'AbstractControl.pending:boolean',
  'AbstractControl.pristine:boolean',
  'AbstractControl.root:AbstractControl',
  'AbstractControl.setErrors(errors:{[key:string]:any}, {emitEvent}:{emitEvent?:boolean}):void',
  'AbstractControl.setParent(parent:ControlGroup|ControlArray):void',
  'AbstractControl.status:string',
  'AbstractControl.statusChanges:Observable<any>',
  'AbstractControl.touched:boolean',
  'AbstractControl.untouched:boolean',
  'AbstractControl.updateValueAndValidity({onlySelf,emitEvent}:{onlySelf?:boolean, emitEvent?:boolean}):void',
  'AbstractControl.valid:boolean',
  'AbstractControl.value:any',
  'AbstractControl.valueChanges:Observable<any>',
  'AbstractControlDirective',
  'AbstractControlDirective.control:AbstractControl',
  'AbstractControlDirective.dirty:boolean',
  'AbstractControlDirective.errors:{[key:string]:any}',
  'AbstractControlDirective.path:string[]',
  'AbstractControlDirective.pristine:boolean',
  'AbstractControlDirective.touched:boolean',
  'AbstractControlDirective.untouched:boolean',
  'AbstractControlDirective.valid:boolean',
  'AbstractControlDirective.value:any',
  'AsyncPipe',
  'AsyncPipe.constructor(_ref:ChangeDetectorRef)',
  'AsyncPipe.ngOnDestroy():void',
  'AsyncPipe.transform(obj:Observable<any>|Promise<any>|EventEmitter<any>):any',
  'CheckboxControlValueAccessor',
  'CheckboxControlValueAccessor.constructor(_renderer:Renderer, _elementRef:ElementRef)',
  'CheckboxControlValueAccessor.onChange:any',
  'CheckboxControlValueAccessor.onTouched:any',
  'CheckboxControlValueAccessor.registerOnChange(fn:(_: any) => {}):void',
  'CheckboxControlValueAccessor.registerOnTouched(fn:() => {}):void',
  'CheckboxControlValueAccessor.writeValue(value:any):void',
  'const APP_BASE_HREF:OpaqueToken',
  'const COMMON_DIRECTIVES:Type[][]',
  'const COMMON_PIPES:any',
  'const CORE_DIRECTIVES:Type[]',
  'const FORM_BINDINGS:any',
  'const FORM_DIRECTIVES:Type[]',
  'const FORM_PROVIDERS:Type[]',
  'const NG_ASYNC_VALIDATORS:OpaqueToken',
  'const NG_VALIDATORS:OpaqueToken',
  'const NG_VALUE_ACCESSOR:OpaqueToken',
  'Control',
  'Control.constructor(value:any, validator:ValidatorFn, asyncValidator:AsyncValidatorFn)',
  'Control.registerOnChange(fn:Function):void',
  'Control.updateValue(value:any, {onlySelf,emitEvent,emitModelToViewChange}:{onlySelf?:boolean, emitEvent?:boolean, emitModelToViewChange?:boolean}):void',
  'ControlArray',
  'ControlArray.at(index:number):AbstractControl',
  'ControlArray.constructor(controls:AbstractControl[], validator:ValidatorFn, asyncValidator:AsyncValidatorFn)',
  'ControlArray.insert(index:number, control:AbstractControl):void',
  'ControlArray.length:number',
  'ControlArray.push(control:AbstractControl):void',
  'ControlArray.removeAt(index:number):void',
  'ControlContainer',
  'ControlContainer.formDirective:Form',
  'ControlContainer.name:string',
  'ControlContainer.path:string[]',
  'ControlGroup',
  'ControlGroup.addControl(name:string, control:AbstractControl):void',
  'ControlGroup.constructor(controls:{[key:string]:AbstractControl}, optionals:{[key:string]:boolean}, validator:ValidatorFn, asyncValidator:AsyncValidatorFn)',
  'ControlGroup.contains(controlName:string):boolean',
  'ControlGroup.exclude(controlName:string):void',
  'ControlGroup.include(controlName:string):void',
  'ControlGroup.removeControl(name:string):void',
  'ControlValueAccessor',
  'ControlValueAccessor.registerOnChange(fn:any):void',
  'ControlValueAccessor.registerOnTouched(fn:any):void',
  'ControlValueAccessor.writeValue(obj:any):void',
  'CurrencyPipe',
  'CurrencyPipe.transform(value:any, currencyCode:string, symbolDisplay:boolean, digits:string):string',
  'DatePipe',
  'DatePipe.supports(obj:any):boolean',
  'DatePipe.transform(value:any, pattern:string):string',
  'DecimalPipe',
  'DecimalPipe.transform(value:any, digits:string):string',
  'DefaultValueAccessor',
  'DefaultValueAccessor.constructor(_renderer:Renderer, _elementRef:ElementRef)',
  'DefaultValueAccessor.onChange:any',
  'DefaultValueAccessor.onTouched:any',
  'DefaultValueAccessor.registerOnChange(fn:(_: any) => void):void',
  'DefaultValueAccessor.registerOnTouched(fn:() => void):void',
  'DefaultValueAccessor.writeValue(value:any):void',
  'Form',
  'Form.addControl(dir:NgControl):void',
  'Form.addControlGroup(dir:NgControlGroup):void',
  'Form.getControl(dir:NgControl):Control',
  'Form.getControlGroup(dir:NgControlGroup):ControlGroup',
  'Form.removeControl(dir:NgControl):void',
  'Form.removeControlGroup(dir:NgControlGroup):void',
  'Form.updateModel(dir:NgControl, value:any):void',
  'FormBuilder',
  'FormBuilder.array(controlsConfig:any[], validator:ValidatorFn, asyncValidator:AsyncValidatorFn):ControlArray',
  'FormBuilder.control(value:Object, validator:ValidatorFn, asyncValidator:AsyncValidatorFn):Control',
  'FormBuilder.group(controlsConfig:{[key:string]:any}, extra:{[key:string]:any}):ControlGroup',
  'HashLocationStrategy',
  'HashLocationStrategy.back():void',
  'HashLocationStrategy.constructor(_platformLocation:PlatformLocation, _baseHref:string)',
  'HashLocationStrategy.forward():void',
  'HashLocationStrategy.getBaseHref():string',
  'HashLocationStrategy.onPopState(fn:UrlChangeListener):void',
  'HashLocationStrategy.path():string',
  'HashLocationStrategy.prepareExternalUrl(internal:string):string',
  'HashLocationStrategy.pushState(state:any, title:string, path:string, queryParams:string):any',
  'HashLocationStrategy.replaceState(state:any, title:string, path:string, queryParams:string):any',
  'I18nPluralPipe',
  'I18nPluralPipe.transform(value:number, pluralMap:{[count:string]:string}):string',
  'I18nSelectPipe',
  'I18nSelectPipe.transform(value:string, mapping:{[key:string]:string}):string',
  'JsonPipe',
  'JsonPipe.transform(value:any):string',
  'Location',
  'Location.back():void',
  'Location.constructor(platformStrategy:LocationStrategy)',
  'Location.forward():void',
  'Location.go(path:string, query:string):void',
  'Location.isCurrentPathEqualTo(path:string, query:string):boolean',
  'Location.joinWithSlash(start:string, end:string):string',
  'Location.normalize(url:string):string',
  'Location.normalizeQueryParams(params:string):string',
  'Location.path():string',
  'Location.prepareExternalUrl(url:string):string',
  'Location.replaceState(path:string, query:string):void',
  'Location.stripTrailingSlash(url:string):string',
  'Location.subscribe(onNext:(value: any) => void, onThrow:(exception: any) => void, onReturn:() => void):Object',
  'LocationStrategy',
  'LocationStrategy.back():void',
  'LocationStrategy.forward():void',
  'LocationStrategy.getBaseHref():string',
  'LocationStrategy.onPopState(fn:UrlChangeListener):void',
  'LocationStrategy.path():string',
  'LocationStrategy.prepareExternalUrl(internal:string):string',
  'LocationStrategy.pushState(state:any, title:string, url:string, queryParams:string):void',
  'LocationStrategy.replaceState(state:any, title:string, url:string, queryParams:string):void',
  'LowerCasePipe',
  'LowerCasePipe.transform(value:string):string',
  'MaxLengthValidator',
  'MaxLengthValidator.constructor(maxLength:string)',
  'MaxLengthValidator.validate(c:AbstractControl):{[key:string]:any}',
  'MinLengthValidator',
  'MinLengthValidator.constructor(minLength:string)',
  'MinLengthValidator.validate(c:AbstractControl):{[key:string]:any}',
  'NgClass',
  'NgClass.constructor(_iterableDiffers:IterableDiffers, _keyValueDiffers:KeyValueDiffers, _ngEl:ElementRef, _renderer:Renderer)',
  'NgClass.initialClasses=(v:string)',
  'NgClass.ngDoCheck():void',
  'NgClass.ngOnDestroy():void',
  'NgClass.rawClass=(v:string|string[]|Set<string>|{[key:string]:any})',
  'NgControl',
  'NgControl.asyncValidator:AsyncValidatorFn',
  'NgControl.name:string',
  'NgControl.validator:ValidatorFn',
  'NgControl.valueAccessor:ControlValueAccessor',
  'NgControl.viewToModelUpdate(newValue:any):void',
  'NgControlGroup',
  'NgControlGroup.asyncValidator:AsyncValidatorFn',
  'NgControlGroup.constructor(parent:ControlContainer, _validators:any[], _asyncValidators:any[])',
  'NgControlGroup.control:ControlGroup',
  'NgControlGroup.formDirective:Form',
  'NgControlGroup.ngOnDestroy():void',
  'NgControlGroup.ngOnInit():void',
  'NgControlGroup.path:string[]',
  'NgControlGroup.validator:ValidatorFn',
  'NgControlName',
  'NgControlName.asyncValidator:AsyncValidatorFn',
  'NgControlName.constructor(_parent:ControlContainer, _validators:any[], _asyncValidators:any[], valueAccessors:ControlValueAccessor[])',
  'NgControlName.control:Control',
  'NgControlName.formDirective:any',
  'NgControlName.model:any',
  'NgControlName.ngOnChanges(changes:SimpleChanges):any',
  'NgControlName.ngOnDestroy():void',
  'NgControlName.path:string[]',
  'NgControlName.update:any',
  'NgControlName.validator:ValidatorFn',
  'NgControlName.viewModel:any',
  'NgControlName.viewToModelUpdate(newValue:any):void',
  'NgControlStatus',
  'NgControlStatus.constructor(cd:NgControl)',
  'NgControlStatus.ngClassDirty:boolean',
  'NgControlStatus.ngClassInvalid:boolean',
  'NgControlStatus.ngClassPristine:boolean',
  'NgControlStatus.ngClassTouched:boolean',
  'NgControlStatus.ngClassUntouched:boolean',
  'NgControlStatus.ngClassValid:boolean',
  'NgFor',
  'NgFor.constructor(_viewContainer:ViewContainerRef, _templateRef:TemplateRef<NgForRow>, _iterableDiffers:IterableDiffers, _cdr:ChangeDetectorRef)',
  'NgFor.ngDoCheck():any',
  'NgFor.ngForOf=(value:any)',
  'NgFor.ngForTemplate=(value:TemplateRef<NgForRow>)',
  'NgFor.ngForTrackBy=(value:TrackByFn)',
  'NgForm',
  'NgForm.addControl(dir:NgControl):void',
  'NgForm.addControlGroup(dir:NgControlGroup):void',
  'NgForm.constructor(validators:any[], asyncValidators:any[])',
  'NgForm.control:ControlGroup',
  'NgForm.controls:{[key:string]:AbstractControl}',
  'NgForm.form:ControlGroup',
  'NgForm.formDirective:Form',
  'NgForm.getControl(dir:NgControl):Control',
  'NgForm.getControlGroup(dir:NgControlGroup):ControlGroup',
  'NgForm.ngSubmit:any',
  'NgForm.onSubmit():boolean',
  'NgForm.path:string[]',
  'NgForm.removeControl(dir:NgControl):void',
  'NgForm.removeControlGroup(dir:NgControlGroup):void',
  'NgForm.updateModel(dir:NgControl, value:any):void',
  'NgFormControl',
  'NgFormControl.asyncValidator:AsyncValidatorFn',
  'NgFormControl.constructor(_validators:any[], _asyncValidators:any[], valueAccessors:ControlValueAccessor[])',
  'NgFormControl.control:Control',
  'NgFormControl.form:Control',
  'NgFormControl.model:any',
  'NgFormControl.ngOnChanges(changes:SimpleChanges):void',
  'NgFormControl.path:string[]',
  'NgFormControl.update:any',
  'NgFormControl.validator:ValidatorFn',
  'NgFormControl.viewModel:any',
  'NgFormControl.viewToModelUpdate(newValue:any):void',
  'NgFormModel',
  'NgFormModel.addControl(dir:NgControl):void',
  'NgFormModel.addControlGroup(dir:NgControlGroup):any',
  'NgFormModel.constructor(_validators:any[], _asyncValidators:any[])',
  'NgFormModel.control:ControlGroup',
  'NgFormModel.directives:NgControl[]',
  'NgFormModel.form:ControlGroup',
  'NgFormModel.formDirective:Form',
  'NgFormModel.getControl(dir:NgControl):Control',
  'NgFormModel.getControlGroup(dir:NgControlGroup):ControlGroup',
  'NgFormModel.ngOnChanges(changes:SimpleChanges):void',
  'NgFormModel.ngSubmit:any',
  'NgFormModel.onSubmit():boolean',
  'NgFormModel.path:string[]',
  'NgFormModel.removeControl(dir:NgControl):void',
  'NgFormModel.removeControlGroup(dir:NgControlGroup):any',
  'NgFormModel.updateModel(dir:NgControl, value:any):void',
  'NgIf',
  'NgIf.constructor(_viewContainer:ViewContainerRef, _templateRef:TemplateRef<Object>)',
  'NgIf.ngIf=(newCondition:any)',
  'NgLocalization',
  'NgLocalization.getPluralCategory(value:any):string',
  'NgModel',
  'NgModel.asyncValidator:AsyncValidatorFn',
  'NgModel.constructor(_validators:any[], _asyncValidators:any[], valueAccessors:ControlValueAccessor[])',
  'NgModel.control:Control',
  'NgModel.model:any',
  'NgModel.ngOnChanges(changes:SimpleChanges):any',
  'NgModel.path:string[]',
  'NgModel.update:any',
  'NgModel.validator:ValidatorFn',
  'NgModel.viewModel:any',
  'NgModel.viewToModelUpdate(newValue:any):void',
  'NgPlural',
  'NgPlural.cases:QueryList<NgPluralCase>',
  'NgPlural.constructor(_localization:NgLocalization)',
  'NgPlural.ngAfterContentInit():any',
  'NgPlural.ngPlural=(value:number)',
  'NgPluralCase',
  'NgPluralCase.constructor(value:string, template:TemplateRef<Object>, viewContainer:ViewContainerRef)',
  'NgSelectOption',
  'NgSelectOption.constructor(_element:ElementRef, _renderer:Renderer, _select:SelectControlValueAccessor)',
  'NgSelectOption.id:string',
  'NgSelectOption.ngOnDestroy():any',
  'NgSelectOption.ngValue=(value:any)',
  'NgSelectOption.value=(value:any)',
  'NgStyle',
  'NgStyle.constructor(_differs:KeyValueDiffers, _ngEl:ElementRef, _renderer:Renderer)',
  'NgStyle.ngDoCheck():any',
  'NgStyle.rawStyle=(v:{[key:string]:string})',
  'NgSwitch',
  'NgSwitch.ngSwitch=(value:any)',
  'NgSwitchDefault',
  'NgSwitchDefault.constructor(viewContainer:ViewContainerRef, templateRef:TemplateRef<Object>, sswitch:NgSwitch)',
  'NgSwitchWhen',
  'NgSwitchWhen.constructor(viewContainer:ViewContainerRef, templateRef:TemplateRef<Object>, ngSwitch:NgSwitch)',
  'NgSwitchWhen.ngSwitchWhen=(value:any)',
  'NgTemplateOutlet',
  'NgTemplateOutlet.constructor(_viewContainerRef:ViewContainerRef)',
  'NgTemplateOutlet.ngTemplateOutlet=(templateRef:TemplateRef<Object>)',
  'NumberPipe',
  'PathLocationStrategy',
  'PathLocationStrategy.back():void',
  'PathLocationStrategy.constructor(_platformLocation:PlatformLocation, href:string)',
  'PathLocationStrategy.forward():void',
  'PathLocationStrategy.getBaseHref():string',
  'PathLocationStrategy.onPopState(fn:UrlChangeListener):void',
  'PathLocationStrategy.path():string',
  'PathLocationStrategy.prepareExternalUrl(internal:string):string',
  'PathLocationStrategy.pushState(state:any, title:string, url:string, queryParams:string):any',
  'PathLocationStrategy.replaceState(state:any, title:string, url:string, queryParams:string):any',
  'PatternValidator',
  'PatternValidator.constructor(pattern:string)',
  'PatternValidator.validate(c:AbstractControl):{[key:string]:any}',
  'PercentPipe',
  'PercentPipe.transform(value:any, digits:string):string',
  'PlatformLocation',
  'PlatformLocation.back():void',
  'PlatformLocation.forward():void',
  'PlatformLocation.getBaseHrefFromDOM():string',
  'PlatformLocation.hash:string',
  'PlatformLocation.onHashChange(fn:UrlChangeListener):void',
  'PlatformLocation.onPopState(fn:UrlChangeListener):void',
  'PlatformLocation.pathname:string',
  'PlatformLocation.pushState(state:any, title:string, url:string):void',
  'PlatformLocation.replaceState(state:any, title:string, url:string):void',
  'PlatformLocation.search:string',
  'RadioButtonState',
  'RadioButtonState.constructor(checked:boolean, value:string)',
  'ReplacePipe',
  'ReplacePipe.transform(value:any, pattern:string|RegExp, replacement:Function|string):any',
  'RequiredValidator',
  'SelectControlValueAccessor',
  'SelectControlValueAccessor.constructor(_renderer:Renderer, _elementRef:ElementRef)',
  'SelectControlValueAccessor.onChange:any',
  'SelectControlValueAccessor.onTouched:any',
  'SelectControlValueAccessor.registerOnChange(fn:(value: any) => any):void',
  'SelectControlValueAccessor.registerOnTouched(fn:() => any):void',
  'SelectControlValueAccessor.value:any',
  'SelectControlValueAccessor.writeValue(value:any):void',
  'SlicePipe',
  'SlicePipe.transform(value:any, start:number, end:number):any',
  'UpperCasePipe',
  'UpperCasePipe.transform(value:string):string',
  'UrlChangeEvent',
  'UrlChangeEvent.type:string',
  'UrlChangeListener',
  'Validator',
  'Validator.validate(c:AbstractControl):{[key:string]:any}',
  'Validators',
  'Validators.compose(validators:ValidatorFn[]):ValidatorFn',
  'Validators.composeAsync(validators:AsyncValidatorFn[]):AsyncValidatorFn',
  'Validators.maxLength(maxLength:number):ValidatorFn',
  'Validators.minLength(minLength:number):ValidatorFn',
  'Validators.nullValidator(c:AbstractControl):{[key:string]:boolean}',
  'Validators.pattern(pattern:string):ValidatorFn',
  'Validators.required(control:AbstractControl):{[key:string]:boolean}',
];

const COMPILER = [
  'AttrAst',
  'AttrAst.constructor(name:string, value:string, sourceSpan:ParseSourceSpan)',
  'AttrAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'BoundDirectivePropertyAst',
  'BoundDirectivePropertyAst.constructor(directiveName:string, templateName:string, value:AST, sourceSpan:ParseSourceSpan)',
  'BoundDirectivePropertyAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'BoundElementPropertyAst',
  'BoundElementPropertyAst.constructor(name:string, type:PropertyBindingType, securityContext:SecurityContext, value:AST, unit:string, sourceSpan:ParseSourceSpan)',
  'BoundElementPropertyAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'BoundEventAst',
  'BoundEventAst.constructor(name:string, target:string, handler:AST, sourceSpan:ParseSourceSpan)',
  'BoundEventAst.fullName:any',
  'BoundEventAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'BoundTextAst',
  'BoundTextAst.constructor(value:AST, ngContentIndex:number, sourceSpan:ParseSourceSpan)',
  'BoundTextAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'CompileDiDependencyMetadata',
  'CompileDiDependencyMetadata.constructor({isAttribute,isSelf,isHost,isSkipSelf,isOptional,isValue,query,viewQuery,token,value}:{isAttribute?:boolean, isSelf?:boolean, isHost?:boolean, isSkipSelf?:boolean, isOptional?:boolean, isValue?:boolean, query?:CompileQueryMetadata, viewQuery?:CompileQueryMetadata, token?:CompileTokenMetadata, value?:any})',
  'CompileDiDependencyMetadata.fromJson(data:{[key:string]:any}):CompileDiDependencyMetadata',
  'CompileDiDependencyMetadata.isAttribute:boolean',
  'CompileDiDependencyMetadata.isHost:boolean',
  'CompileDiDependencyMetadata.isOptional:boolean',
  'CompileDiDependencyMetadata.isSelf:boolean',
  'CompileDiDependencyMetadata.isSkipSelf:boolean',
  'CompileDiDependencyMetadata.isValue:boolean',
  'CompileDiDependencyMetadata.query:CompileQueryMetadata',
  'CompileDiDependencyMetadata.toJson():{[key:string]:any}',
  'CompileDiDependencyMetadata.token:CompileTokenMetadata',
  'CompileDiDependencyMetadata.value:any',
  'CompileDiDependencyMetadata.viewQuery:CompileQueryMetadata',
  'CompileDirectiveMetadata',
  'CompileDirectiveMetadata.changeDetection:ChangeDetectionStrategy',
  'CompileDirectiveMetadata.constructor({type,isComponent,selector,exportAs,changeDetection,inputs,outputs,hostListeners,hostProperties,hostAttributes,lifecycleHooks,providers,viewProviders,queries,viewQueries,template}:{type?:CompileTypeMetadata, isComponent?:boolean, selector?:string, exportAs?:string, changeDetection?:ChangeDetectionStrategy, inputs?:{[key:string]:string}, outputs?:{[key:string]:string}, hostListeners?:{[key:string]:string}, hostProperties?:{[key:string]:string}, hostAttributes?:{[key:string]:string}, lifecycleHooks?:LifecycleHooks[], providers?:Array<CompileProviderMetadata|CompileTypeMetadata|CompileIdentifierMetadata|any[]>, viewProviders?:Array<CompileProviderMetadata|CompileTypeMetadata|CompileIdentifierMetadata|any[]>, queries?:CompileQueryMetadata[], viewQueries?:CompileQueryMetadata[], template?:CompileTemplateMetadata})',
  'CompileDirectiveMetadata.create({type,isComponent,selector,exportAs,changeDetection,inputs,outputs,host,lifecycleHooks,providers,viewProviders,queries,viewQueries,template}:{type?:CompileTypeMetadata, isComponent?:boolean, selector?:string, exportAs?:string, changeDetection?:ChangeDetectionStrategy, inputs?:string[], outputs?:string[], host?:{[key:string]:string}, lifecycleHooks?:LifecycleHooks[], providers?:Array<CompileProviderMetadata|CompileTypeMetadata|CompileIdentifierMetadata|any[]>, viewProviders?:Array<CompileProviderMetadata|CompileTypeMetadata|CompileIdentifierMetadata|any[]>, queries?:CompileQueryMetadata[], viewQueries?:CompileQueryMetadata[], template?:CompileTemplateMetadata}):CompileDirectiveMetadata',
  'CompileDirectiveMetadata.exportAs:string',
  'CompileDirectiveMetadata.fromJson(data:{[key:string]:any}):CompileDirectiveMetadata',
  'CompileDirectiveMetadata.hostAttributes:{[key:string]:string}',
  'CompileDirectiveMetadata.hostListeners:{[key:string]:string}',
  'CompileDirectiveMetadata.hostProperties:{[key:string]:string}',
  'CompileDirectiveMetadata.identifier:CompileIdentifierMetadata',
  'CompileDirectiveMetadata.inputs:{[key:string]:string}',
  'CompileDirectiveMetadata.isComponent:boolean',
  'CompileDirectiveMetadata.lifecycleHooks:LifecycleHooks[]',
  'CompileDirectiveMetadata.outputs:{[key:string]:string}',
  'CompileDirectiveMetadata.providers:CompileProviderMetadata[]',
  'CompileDirectiveMetadata.queries:CompileQueryMetadata[]',
  'CompileDirectiveMetadata.selector:string',
  'CompileDirectiveMetadata.template:CompileTemplateMetadata',
  'CompileDirectiveMetadata.toJson():{[key:string]:any}',
  'CompileDirectiveMetadata.type:CompileTypeMetadata',
  'CompileDirectiveMetadata.viewProviders:CompileProviderMetadata[]',
  'CompileDirectiveMetadata.viewQueries:CompileQueryMetadata[]',
  'CompileFactoryMetadata',
  'CompileFactoryMetadata.constructor({runtime,name,moduleUrl,prefix,diDeps,value}:{runtime?:Function, name?:string, prefix?:string, moduleUrl?:string, value?:boolean, diDeps?:CompileDiDependencyMetadata[]})',
  'CompileFactoryMetadata.diDeps:CompileDiDependencyMetadata[]',
  'CompileFactoryMetadata.fromJson(data:{[key:string]:any}):CompileFactoryMetadata',
  'CompileFactoryMetadata.identifier:CompileIdentifierMetadata',
  'CompileFactoryMetadata.moduleUrl:string',
  'CompileFactoryMetadata.name:string',
  'CompileFactoryMetadata.prefix:string',
  'CompileFactoryMetadata.runtime:Function',
  'CompileFactoryMetadata.toJson():{[key:string]:any}',
  'CompileFactoryMetadata.value:any',
  'CompileIdentifierMetadata',
  'CompileIdentifierMetadata.constructor({runtime,name,moduleUrl,prefix,value}:{runtime?:any, name?:string, moduleUrl?:string, prefix?:string, value?:any})',
  'CompileIdentifierMetadata.fromJson(data:{[key:string]:any}):CompileIdentifierMetadata',
  'CompileIdentifierMetadata.identifier:CompileIdentifierMetadata',
  'CompileIdentifierMetadata.moduleUrl:string',
  'CompileIdentifierMetadata.name:string',
  'CompileIdentifierMetadata.prefix:string',
  'CompileIdentifierMetadata.runtime:any',
  'CompileIdentifierMetadata.toJson():{[key:string]:any}',
  'CompileIdentifierMetadata.value:any',
  'CompileMetadataWithIdentifier',
  'CompileMetadataWithIdentifier.identifier:CompileIdentifierMetadata',
  'CompileMetadataWithIdentifier.toJson():{[key:string]:any}',
  'CompileMetadataWithType',
  'CompileMetadataWithType.identifier:CompileIdentifierMetadata',
  'CompileMetadataWithType.toJson():{[key:string]:any}',
  'CompileMetadataWithType.type:CompileTypeMetadata',
  'CompilePipeMetadata',
  'CompilePipeMetadata.constructor({type,name,pure,lifecycleHooks}:{type?:CompileTypeMetadata, name?:string, pure?:boolean, lifecycleHooks?:LifecycleHooks[]})',
  'CompilePipeMetadata.fromJson(data:{[key:string]:any}):CompilePipeMetadata',
  'CompilePipeMetadata.identifier:CompileIdentifierMetadata',
  'CompilePipeMetadata.lifecycleHooks:LifecycleHooks[]',
  'CompilePipeMetadata.name:string',
  'CompilePipeMetadata.pure:boolean',
  'CompilePipeMetadata.toJson():{[key:string]:any}',
  'CompilePipeMetadata.type:CompileTypeMetadata',
  'CompileProviderMetadata',
  'CompileProviderMetadata.constructor({token,useClass,useValue,useExisting,useFactory,deps,multi}:{token?:CompileTokenMetadata, useClass?:CompileTypeMetadata, useValue?:any, useExisting?:CompileTokenMetadata, useFactory?:CompileFactoryMetadata, deps?:CompileDiDependencyMetadata[], multi?:boolean})',
  'CompileProviderMetadata.deps:CompileDiDependencyMetadata[]',
  'CompileProviderMetadata.fromJson(data:{[key:string]:any}):CompileProviderMetadata',
  'CompileProviderMetadata.multi:boolean',
  'CompileProviderMetadata.toJson():{[key:string]:any}',
  'CompileProviderMetadata.token:CompileTokenMetadata',
  'CompileProviderMetadata.useClass:CompileTypeMetadata',
  'CompileProviderMetadata.useExisting:CompileTokenMetadata',
  'CompileProviderMetadata.useFactory:CompileFactoryMetadata',
  'CompileProviderMetadata.useValue:any',
  'CompileQueryMetadata',
  'CompileQueryMetadata.constructor({selectors,descendants,first,propertyName,read}:{selectors?:Array<CompileTokenMetadata>, descendants?:boolean, first?:boolean, propertyName?:string, read?:CompileTokenMetadata})',
  'CompileQueryMetadata.descendants:boolean',
  'CompileQueryMetadata.first:boolean',
  'CompileQueryMetadata.fromJson(data:{[key:string]:any}):CompileQueryMetadata',
  'CompileQueryMetadata.propertyName:string',
  'CompileQueryMetadata.read:CompileTokenMetadata',
  'CompileQueryMetadata.selectors:Array<CompileTokenMetadata>',
  'CompileQueryMetadata.toJson():{[key:string]:any}',
  'CompilerConfig',
  'CompilerConfig.constructor(genDebugInfo:boolean, logBindingUpdate:boolean, useJit:boolean, renderTypes:RenderTypes)',
  'CompilerConfig.renderTypes:RenderTypes',
  'CompileTemplateMetadata',
  'CompileTemplateMetadata.animations:CompileAnimationEntryMetadata[]',
  'CompileTemplateMetadata.constructor({encapsulation,template,templateUrl,styles,styleUrls,animations,ngContentSelectors}:{encapsulation?:ViewEncapsulation, template?:string, templateUrl?:string, styles?:string[], styleUrls?:string[], ngContentSelectors?:string[], animations?:CompileAnimationEntryMetadata[]})',
  'CompileTemplateMetadata.encapsulation:ViewEncapsulation',
  'CompileTemplateMetadata.fromJson(data:{[key:string]:any}):CompileTemplateMetadata',
  'CompileTemplateMetadata.ngContentSelectors:string[]',
  'CompileTemplateMetadata.styles:string[]',
  'CompileTemplateMetadata.styleUrls:string[]',
  'CompileTemplateMetadata.template:string',
  'CompileTemplateMetadata.templateUrl:string',
  'CompileTemplateMetadata.toJson():{[key:string]:any}',
  'CompileTokenMetadata',
  'CompileTokenMetadata.assetCacheKey:any',
  'CompileTokenMetadata.constructor({value,identifier,identifierIsInstance}:{value?:any, identifier?:CompileIdentifierMetadata, identifierIsInstance?:boolean})',
  'CompileTokenMetadata.equalsTo(token2:CompileTokenMetadata):boolean',
  'CompileTokenMetadata.fromJson(data:{[key:string]:any}):CompileTokenMetadata',
  'CompileTokenMetadata.identifier:CompileIdentifierMetadata',
  'CompileTokenMetadata.identifierIsInstance:boolean',
  'CompileTokenMetadata.name:string',
  'CompileTokenMetadata.runtimeCacheKey:any',
  'CompileTokenMetadata.toJson():{[key:string]:any}',
  'CompileTokenMetadata.value:any',
  'CompileTypeMetadata',
  'CompileTypeMetadata.constructor({runtime,name,moduleUrl,prefix,isHost,value,diDeps}:{runtime?:Type, name?:string, moduleUrl?:string, prefix?:string, isHost?:boolean, value?:any, diDeps?:CompileDiDependencyMetadata[]})',
  'CompileTypeMetadata.diDeps:CompileDiDependencyMetadata[]',
  'CompileTypeMetadata.fromJson(data:{[key:string]:any}):CompileTypeMetadata',
  'CompileTypeMetadata.identifier:CompileIdentifierMetadata',
  'CompileTypeMetadata.isHost:boolean',
  'CompileTypeMetadata.moduleUrl:string',
  'CompileTypeMetadata.name:string',
  'CompileTypeMetadata.prefix:string',
  'CompileTypeMetadata.runtime:Type',
  'CompileTypeMetadata.toJson():{[key:string]:any}',
  'CompileTypeMetadata.type:CompileTypeMetadata',
  'CompileTypeMetadata.value:any',
  'const COMPILER_PROVIDERS:Array<any|Type|{[k:string]:any}|any[]>',
  'const TEMPLATE_TRANSFORMS:any',
  'createOfflineCompileUrlResolver():UrlResolver',
  'DirectiveAst',
  'DirectiveAst.constructor(directive:CompileDirectiveMetadata, inputs:BoundDirectivePropertyAst[], hostProperties:BoundElementPropertyAst[], hostEvents:BoundEventAst[], sourceSpan:ParseSourceSpan)',
  'DirectiveAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'DirectiveResolver',
  'DirectiveResolver.constructor(_reflector:ReflectorReader)',
  'DirectiveResolver.resolve(type:Type):DirectiveMetadata',
  'ElementAst',
  'ElementAst.constructor(name:string, attrs:AttrAst[], inputs:BoundElementPropertyAst[], outputs:BoundEventAst[], references:ReferenceAst[], directives:DirectiveAst[], providers:ProviderAst[], hasViewContainer:boolean, children:TemplateAst[], ngContentIndex:number, sourceSpan:ParseSourceSpan)',
  'ElementAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'ElementSchemaRegistry',
  'ElementSchemaRegistry.getMappedPropName(propName:string):string',
  'ElementSchemaRegistry.hasProperty(tagName:string, propName:string):boolean',
  'ElementSchemaRegistry.securityContext(tagName:string, propName:string):any',
  'EmbeddedTemplateAst',
  'EmbeddedTemplateAst.constructor(attrs:AttrAst[], outputs:BoundEventAst[], references:ReferenceAst[], variables:VariableAst[], directives:DirectiveAst[], providers:ProviderAst[], hasViewContainer:boolean, children:TemplateAst[], ngContentIndex:number, sourceSpan:ParseSourceSpan)',
  'EmbeddedTemplateAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'NgContentAst',
  'NgContentAst.constructor(index:number, ngContentIndex:number, sourceSpan:ParseSourceSpan)',
  'NgContentAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'NormalizedComponentWithViewDirectives',
  'NormalizedComponentWithViewDirectives.constructor(component:CompileDirectiveMetadata, directives:CompileDirectiveMetadata[], pipes:CompilePipeMetadata[])',
  'OfflineCompiler',
  'OfflineCompiler.compileTemplates(components:NormalizedComponentWithViewDirectives[]):SourceModule',
  'OfflineCompiler.constructor(_directiveNormalizer:DirectiveNormalizer, _templateParser:TemplateParser, _styleCompiler:StyleCompiler, _viewCompiler:ViewCompiler, _outputEmitter:OutputEmitter, _xhr:XHR)',
  'OfflineCompiler.loadAndCompileStylesheet(stylesheetUrl:string, shim:boolean, suffix:string):Promise<StyleSheetSourceWithImports>',
  'OfflineCompiler.normalizeDirectiveMetadata(directive:CompileDirectiveMetadata):Promise<CompileDirectiveMetadata>',
  'PipeResolver',
  'PipeResolver.constructor(_reflector:ReflectorReader)',
  'PipeResolver.resolve(type:Type):PipeMetadata',
  'PropertyBindingType',
  'PropertyBindingType.Animation',
  'PropertyBindingType.Attribute',
  'PropertyBindingType.Class',
  'PropertyBindingType.Property',
  'PropertyBindingType.Style',
  'ProviderAst',
  'ProviderAst.constructor(token:CompileTokenMetadata, multiProvider:boolean, eager:boolean, providers:CompileProviderMetadata[], providerType:ProviderAstType, sourceSpan:ParseSourceSpan)',
  'ProviderAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'ProviderAstType',
  'ProviderAstType.Builtin',
  'ProviderAstType.Component',
  'ProviderAstType.Directive',
  'ProviderAstType.PrivateService',
  'ProviderAstType.PublicService',
  'ReferenceAst',
  'ReferenceAst.constructor(name:string, value:CompileTokenMetadata, sourceSpan:ParseSourceSpan)',
  'ReferenceAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'RenderTypes',
  'RenderTypes.renderComment:CompileIdentifierMetadata',
  'RenderTypes.renderElement:CompileIdentifierMetadata',
  'RenderTypes.renderer:CompileIdentifierMetadata',
  'RenderTypes.renderEvent:CompileIdentifierMetadata',
  'RenderTypes.renderNode:CompileIdentifierMetadata',
  'RenderTypes.renderText:CompileIdentifierMetadata',
  'RuntimeCompiler',
  'RuntimeCompiler.clearCache():any',
  'RuntimeCompiler.constructor(_metadataResolver:CompileMetadataResolver, _templateNormalizer:DirectiveNormalizer, _templateParser:TemplateParser, _styleCompiler:StyleCompiler, _viewCompiler:ViewCompiler, _xhr:XHR, _genConfig:CompilerConfig)',
  'RuntimeCompiler.resolveComponent(component:Type|string):Promise<ComponentFactory<any>>',
  'SourceModule',
  'SourceModule.constructor(moduleUrl:string, source:string)',
  'TemplateAst',
  'TemplateAst.sourceSpan:ParseSourceSpan',
  'TemplateAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'TemplateAstVisitor',
  'TemplateAstVisitor.visitAttr(ast:AttrAst, context:any):any',
  'TemplateAstVisitor.visitBoundText(ast:BoundTextAst, context:any):any',
  'TemplateAstVisitor.visitDirective(ast:DirectiveAst, context:any):any',
  'TemplateAstVisitor.visitDirectiveProperty(ast:BoundDirectivePropertyAst, context:any):any',
  'TemplateAstVisitor.visitElement(ast:ElementAst, context:any):any',
  'TemplateAstVisitor.visitElementProperty(ast:BoundElementPropertyAst, context:any):any',
  'TemplateAstVisitor.visitEmbeddedTemplate(ast:EmbeddedTemplateAst, context:any):any',
  'TemplateAstVisitor.visitEvent(ast:BoundEventAst, context:any):any',
  'TemplateAstVisitor.visitNgContent(ast:NgContentAst, context:any):any',
  'TemplateAstVisitor.visitReference(ast:ReferenceAst, context:any):any',
  'TemplateAstVisitor.visitText(ast:TextAst, context:any):any',
  'TemplateAstVisitor.visitVariable(ast:VariableAst, context:any):any',
  'templateVisitAll(visitor:TemplateAstVisitor, asts:TemplateAst[], context:any):any[]',
  'TextAst',
  'TextAst.constructor(value:string, ngContentIndex:number, sourceSpan:ParseSourceSpan)',
  'TextAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'UrlResolver',
  'UrlResolver.constructor(_packagePrefix:string)',
  'UrlResolver.resolve(baseUrl:string, url:string):string',
  'var DEFAULT_PACKAGE_URL_PROVIDER:any',
  'VariableAst',
  'VariableAst.constructor(name:string, value:string, sourceSpan:ParseSourceSpan)',
  'VariableAst.visit(visitor:TemplateAstVisitor, context:any):any',
  'ViewResolver',
  'ViewResolver.constructor(_reflector:ReflectorReader)',
  'ViewResolver.resolve(component:Type):ViewMetadata',
  'XHR',
  'XHR.get(url:string):Promise<string>',
];

const UPGRADE = [
  'UpgradeAdapter',
  'UpgradeAdapter.addProvider(provider:Type|Provider|any[]):void',
  'UpgradeAdapter.bootstrap(element:Element, modules:any[], config:IAngularBootstrapConfig):UpgradeAdapterRef',
  'UpgradeAdapter.downgradeNg2Component(type:Type):Function',
  'UpgradeAdapter.downgradeNg2Provider(token:any):Function',
  'UpgradeAdapter.upgradeNg1Component(name:string):Type',
  'UpgradeAdapter.upgradeNg1Provider(name:string, options:{asToken:any}):any',
  'UpgradeAdapterRef',
  'UpgradeAdapterRef.dispose():any',
  'UpgradeAdapterRef.ng1Injector:IInjectorService',
  'UpgradeAdapterRef.ng1RootScope:IRootScopeService',
  'UpgradeAdapterRef.ng2ApplicationRef:ApplicationRef',
  'UpgradeAdapterRef.ng2Injector:Injector',
  'UpgradeAdapterRef.ready(fn:(upgradeAdapterRef?: UpgradeAdapterRef) => void):any',
];

const PLATFORM_BROWSER = [
  'bootstrap(appComponentType:Type, customProviders:Array<any>):Promise<ComponentRef<any>>',
  'bootstrapApp(appComponentType:Type, customProviders:Array<any>):Promise<ComponentRef<any>>',
  'bootstrapRender(workerScriptUri:string, customProviders:Array<any>):Promise<ApplicationRef>',
  'browserPlatform():PlatformRef',
  'BrowserPlatformLocation',
  'BrowserPlatformLocation.back():void',
  'BrowserPlatformLocation.constructor()',
  'BrowserPlatformLocation.forward():void',
  'BrowserPlatformLocation.getBaseHrefFromDOM():string',
  'BrowserPlatformLocation.hash:string',
  'BrowserPlatformLocation.location:Location',
  'BrowserPlatformLocation.onHashChange(fn:UrlChangeListener):void',
  'BrowserPlatformLocation.onPopState(fn:UrlChangeListener):void',
  'BrowserPlatformLocation.pathname:string',
  'BrowserPlatformLocation.pathname=(newPath:string)',
  'BrowserPlatformLocation.pushState(state:any, title:string, url:string):void',
  'BrowserPlatformLocation.replaceState(state:any, title:string, url:string):void',
  'BrowserPlatformLocation.search:string',
  'By',
  'By.all():Predicate<DebugElement>',
  'By.css(selector:string):Predicate<DebugElement>',
  'By.directive(type:Type):Predicate<DebugElement>',
  'ClientMessageBroker',
  'ClientMessageBroker.runOnService(args:UiArguments, returnType:Type):Promise<any>',
  'ClientMessageBrokerFactory',
  'ClientMessageBrokerFactory.createMessageBroker(channel:string, runInZone:boolean):ClientMessageBroker',
  'const BROWSER_APP_COMPILER_PROVIDERS:Array<any>',
  'const BROWSER_APP_PROVIDERS:Array<any>',
  'const BROWSER_PLATFORM_PROVIDERS:Array<any>',
  'const BROWSER_SANITIZATION_PROVIDERS:Array<any>',
  'const CACHED_TEMPLATE_PROVIDER:Array<any>',
  'const DOCUMENT:OpaqueToken',
  'const ELEMENT_PROBE_PROVIDERS:any[]',
  'const EVENT_MANAGER_PLUGINS:OpaqueToken',
  'const HAMMER_GESTURE_CONFIG:OpaqueToken',
  'const PRIMITIVE:Type',
  'const WORKER_APP_APPLICATION_PROVIDERS:Array<any>',
  'const WORKER_APP_LOCATION_PROVIDERS:any',
  'const WORKER_APP_PLATFORM_PROVIDERS:Array<any>',
  'const WORKER_RENDER_APPLICATION_PROVIDERS:Array<any>',
  'const WORKER_RENDER_LOCATION_PROVIDERS:any',
  'const WORKER_RENDER_PLATFORM_PROVIDERS:Array<any>',
  'const WORKER_RENDER_STARTABLE_MESSAGING_SERVICE:any',
  'const WORKER_SCRIPT:OpaqueToken',
  'disableDebugTools():void',
  'DomEventsPlugin',
  'DomEventsPlugin.addEventListener(element:HTMLElement, eventName:string, handler:Function):Function',
  'DomEventsPlugin.addGlobalEventListener(target:string, eventName:string, handler:Function):Function',
  'DomEventsPlugin.supports(eventName:string):boolean',
  'DomSanitizationService',
  'DomSanitizationService.bypassSecurityTrustHtml(value:string):SafeHtml',
  'DomSanitizationService.bypassSecurityTrustResourceUrl(value:string):any',
  'DomSanitizationService.bypassSecurityTrustScript(value:string):SafeScript',
  'DomSanitizationService.bypassSecurityTrustStyle(value:string):SafeStyle',
  'DomSanitizationService.bypassSecurityTrustUrl(value:string):SafeUrl',
  'DomSanitizationService.sanitize(context:SecurityContext, value:any):string',
  'enableDebugTools(ref:ComponentRef<T>):ComponentRef<T>',
  'EventManager',
  'EventManager.addEventListener(element:HTMLElement, eventName:string, handler:Function):Function',
  'EventManager.addGlobalEventListener(target:string, eventName:string, handler:Function):Function',
  'EventManager.constructor(plugins:EventManagerPlugin[], _zone:NgZone)',
  'EventManager.getZone():NgZone',
  'FnArg',
  'FnArg.constructor(value:any, type:Type)',
  'HammerGestureConfig',
  'HammerGestureConfig.buildHammer(element:HTMLElement):HammerInstance',
  'HammerGestureConfig.events:string[]',
  'HammerGestureConfig.overrides:{[key:string]:Object}',
  'initializeGenericWorkerRenderer(injector:Injector):any',
  'KeyEventsPlugin',
  'KeyEventsPlugin.addEventListener(element:HTMLElement, eventName:string, handler:Function):Function',
  'KeyEventsPlugin.constructor()',
  'KeyEventsPlugin.eventCallback(element:HTMLElement, fullKey:any, handler:Function, zone:NgZone):Function',
  'KeyEventsPlugin.getEventFullKey(event:KeyboardEvent):string',
  'KeyEventsPlugin.parseEventName(eventName:string):{[key:string]:string}',
  'KeyEventsPlugin.supports(eventName:string):boolean',
  'MessageBus',
  'MessageBus.attachToZone(zone:NgZone):void',
  'MessageBus.from(channel:string):EventEmitter<any>',
  'MessageBus.initChannel(channel:string, runInZone:boolean):void',
  'MessageBus.to(channel:string):EventEmitter<any>',
  'MessageBusSink',
  'MessageBusSink.attachToZone(zone:NgZone):void',
  'MessageBusSink.initChannel(channel:string, runInZone:boolean):void',
  'MessageBusSink.to(channel:string):EventEmitter<any>',
  'MessageBusSource',
  'MessageBusSource.attachToZone(zone:NgZone):void',
  'MessageBusSource.from(channel:string):EventEmitter<any>',
  'MessageBusSource.initChannel(channel:string, runInZone:boolean):void',
  'ReceivedMessage',
  'ReceivedMessage.args:any[]',
  'ReceivedMessage.constructor(data:{[key:string]:any})',
  'ReceivedMessage.id:string',
  'ReceivedMessage.method:string',
  'ReceivedMessage.type:string',
  'SafeHtml',
  'SafeResourceUrl',
  'SafeScript',
  'SafeStyle',
  'SafeUrl',
  'ServiceMessageBroker',
  'ServiceMessageBroker.registerMethod(methodName:string, signature:Type[], method:Function, returnType:Type):void',
  'ServiceMessageBrokerFactory',
  'ServiceMessageBrokerFactory.createMessageBroker(channel:string, runInZone:boolean):ServiceMessageBroker',
  'Title',
  'Title.getTitle():string',
  'Title.setTitle(newTitle:string):any',
  'UiArguments',
  'UiArguments.constructor(method:string, args:FnArg[])',
  'var SecurityContext:unknown',
  'WebWorkerInstance',
  'WebWorkerInstance.bus:MessageBus',
  'WebWorkerInstance.init(worker:Worker, bus:MessageBus):any',
  'WebWorkerInstance.worker:Worker',
  'workerAppPlatform():PlatformRef',
  'workerRenderPlatform():PlatformRef',
];

describe('public API', () => {
  check("@angular/core", CORE);
  check("@angular/common", COMMON);
  check("@angular/compiler", COMPILER);
  check("@angular/upgrade", UPGRADE);
  check("@angular/platform-browser", PLATFORM_BROWSER);
});

function check(file: string, expected: string[]) {
  it('should check' + file, () => checkPublicApi(file, expected));
}

function checkPublicApi(file: string, expected: string[]) {
  const sortedActual = publicApi('modules/' + file + '/index.ts').sort();
  const sortedExpected = expected.sort();
  const missing = sortedActual.filter((i) => sortedExpected.indexOf(i) < 0);
  const extra = sortedExpected.filter((i) => sortedActual.indexOf(i) < 0);

  if (missing.length > 0) {
    console.log('=================================================================');
    console.log('=================================================================');
    console.log('=================================================================');
    console.log('=================================================================');
    console.log("Missing:");
    missing.forEach((m) => console.log(m));
  }

  if (extra.length > 0) {
    console.log("Extra:");
    extra.forEach((m) => console.log(m));
  }

  expect(missing.map(s => `+${s}`).concat(extra.map(s => `-${s}`))).toEqual([]);
}
