import { ReflectiveInjector } from '@angular/core';
import { RouterOutletMap } from './router_outlet_map';
import { recognize } from './recognize';
import { rootNode } from './utils/tree';
import { createEmptyUrlTree } from './url_tree';
import { PRIMARY_OUTLET } from './shared';
import { createEmptyState, ActivatedRoute } from './router_state';
import { createUrlTree } from './create_url_tree';
import { forEach } from './utils/collection';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/toPromise';
import { fromPromise } from 'rxjs/observable/fromPromise';
import { forkJoin } from 'rxjs/observable/forkJoin';
export class Router {
    constructor(rootComponent, resolver, urlSerializer, outletMap, location) {
        this.rootComponent = rootComponent;
        this.resolver = resolver;
        this.urlSerializer = urlSerializer;
        this.outletMap = outletMap;
        this.location = location;
        this.currentUrlTree = createEmptyUrlTree();
        this.currentRouterState = createEmptyState(rootComponent.constructor);
        this.setUpLocationChangeListener();
        this.navigateByUrl(this.location.path());
    }
    get routerState() {
        return this.currentRouterState;
    }
    get urlTree() {
        return this.currentUrlTree;
    }
    navigateByUrl(url) {
        const urlTree = this.urlSerializer.parse(url);
        return this.runNavigate(urlTree, false);
    }
    resetConfig(config) {
        this.config = config;
    }
    dispose() { this.locationSubscription.unsubscribe(); }
    createUrlTree(commands, { relativeTo, queryParameters, fragment } = {}) {
        const a = relativeTo ? relativeTo : this.routerState.root;
        return createUrlTree(a, this.currentUrlTree, commands, queryParameters, fragment);
    }
    navigate(commands, extras = {}) {
        return this.runNavigate(this.createUrlTree(commands, extras));
    }
    serializeUrl(url) { return this.urlSerializer.serialize(url); }
    parseUrl(url) { return this.urlSerializer.parse(url); }
    setUpLocationChangeListener() {
        this.locationSubscription = this.location.subscribe((change) => {
            this.runNavigate(this.urlSerializer.parse(change['url']), change['pop']);
        });
    }
    runNavigate(url, pop) {
        const r = recognize(this.config, url, this.currentRouterState).mergeMap((newState) => {
            return new ActivateRoutes(this.resolver, newState, this.currentRouterState).activate(this.outletMap).map(() => {
                this.currentUrlTree = url;
                this.currentRouterState = newState;
                if (!pop) {
                    this.location.go(this.urlSerializer.serialize(url));
                }
            });
        });
        r.subscribe((a) => { }, (e) => { }, () => { });
        return r;
    }
}
class ActivateRoutes {
    constructor(resolver, futureState, currState) {
        this.resolver = resolver;
        this.futureState = futureState;
        this.currState = currState;
    }
    activate(parentOutletMap) {
        const currRoot = this.currState ? rootNode(this.currState) : null;
        const futureRoot = rootNode(this.futureState);
        return this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
    }
    activateChildRoutes(futureNode, currNode, outletMap) {
        const prevChildren = nodeChildrenAsMap(currNode);
        const observables = [];
        futureNode.children.forEach(c => {
            observables.push(this.activateRoutes(c, prevChildren[c.value.outlet], outletMap).toPromise());
            delete prevChildren[c.value.outlet];
        });
        forEach(prevChildren, (v, k) => this.deactivateOutletAndItChildren(outletMap._outlets[k]));
        return forkJoin(observables);
    }
    activateRoutes(futureNode, currNode, parentOutletMap) {
        const future = futureNode.value;
        const curr = currNode ? currNode.value : null;
        const outlet = getOutlet(parentOutletMap, futureNode.value);
        if (future === curr) {
            return this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
        }
        else {
            this.deactivateOutletAndItChildren(outlet);
            const outletMap = new RouterOutletMap();
            return this.activateNewRoutes(outletMap, future, outlet).mergeMap(() => this.activateChildRoutes(futureNode, currNode, outletMap));
        }
    }
    activateNewRoutes(outletMap, future, outlet) {
        const resolved = ReflectiveInjector.resolve([
            { provide: ActivatedRoute, useValue: future },
            { provide: RouterOutletMap, useValue: outletMap }
        ]);
        return fromPromise(this.resolver.resolveComponent(future.component)).
            map(factory => outlet.activate(factory, resolved, outletMap));
    }
    deactivateOutletAndItChildren(outlet) {
        if (outlet && outlet.isActivated) {
            forEach(outlet.outletMap._outlets, (v, k) => this.deactivateOutletAndItChildren(v));
            outlet.deactivate();
        }
    }
}
function nodeChildrenAsMap(node) {
    return node ?
        node.children.reduce((m, c) => {
            m[c.value.outlet] = c;
            return m;
        }, {}) :
        {};
}
function getOutlet(outletMap, route) {
    let outlet = outletMap._outlets[route.outlet];
    if (!outlet) {
        if (route.outlet === PRIMARY_OUTLET) {
            throw new Error(`Cannot find primary outlet`);
        }
        else {
            throw new Error(`Cannot find the outlet ${route.outlet}`);
        }
    }
    return outlet;
}
//# sourceMappingURL=data:application/json;base64,